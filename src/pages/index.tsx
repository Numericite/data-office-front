import Head from "next/head";
import { fr } from "@codegouvfr/react-dsfr";
import { dataContractSchema } from "~/utils/forms/data-contract/schema";
import {
  BaseDataContractForm,
  dataContractFormDefaultValues,
} from "~/utils/forms/data-contract/form";
import { tss } from "tss-react";
import { api } from "~/utils/api";
import { Stepper } from "@codegouvfr/react-dsfr/Stepper";
import { useStepDataContractForm } from "~/utils/forms/data-contract/useStepForm";
import {
  DATA_CONTRACT_STEP_LABELS,
  DATA_CONTRACT_STEP_MAP,
  DATA_CONTRACT_STEPS,
} from "~/utils/forms/data-contract/stepMaps";
import Button from "@codegouvfr/react-dsfr/Button";

export default function Home() {
  const { mutateAsync: createRequest } = api.request.create.useMutation();

  const { classes } = useStyles();

  const wizard = useStepDataContractForm({
    defaultValues: dataContractFormDefaultValues,
    onFinalSubmit: async (values) => {
      await createRequest({ data: values });
    },
  });

  const visible = DATA_CONTRACT_STEP_MAP[wizard.step] as Array<
    keyof typeof dataContractSchema.shape
  >;

  return (
    <>
      <Head>
        <title>DCF - Accueil</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={fr.cx("fr-mt-4w", "fr-mb-8w")}>
          <h1>Formulaire de demande</h1>
          <Stepper
            currentStep={wizard.step + 1}
            stepCount={DATA_CONTRACT_STEPS}
            title={DATA_CONTRACT_STEP_LABELS[wizard.step]}
            nextTitle={DATA_CONTRACT_STEP_LABELS[wizard.step + 1] ?? undefined}
            className={fr.cx("fr-mb-4w")}
          />
          <wizard.form.AppForm>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                wizard.isLast ? wizard.form.handleSubmit() : wizard.next();
              }}
            >
              <BaseDataContractForm
                form={wizard.form}
                visibleSections={visible}
                formId="dcf"
              />
              <div className={fr.cx("fr-mt-4w", "fr-btns-group--inline")}>
                {wizard.step > 0 && (
                  <Button
                    priority="tertiary"
                    onClick={wizard.previous}
                    type="button"
                  >
                    Précédent
                  </Button>
                )}

                <Button priority="primary">
                  {wizard.isLast ? "Soumettre" : "Suivant"}
                </Button>
              </div>
            </form>
          </wizard.form.AppForm>
        </div>
      </main>
    </>
  );
}

const useStyles = tss.withName(Home.name).create(() => ({
  formWrapper: {
    display: "flex",
    flexDirection: "column",
    gap: fr.spacing("3w"),
  },
}));
