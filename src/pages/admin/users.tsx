import Head from "next/head";
import { fr } from "@codegouvfr/react-dsfr";
import { tss } from "tss-react";
import { api } from "~/utils/api";
import Download from "@codegouvfr/react-dsfr/Download";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import type { Request, User } from "@prisma/client";
import type { AlertProps } from "@codegouvfr/react-dsfr/Alert";
import Badge from "@codegouvfr/react-dsfr/Badge";
import Link from "next/link";

type UserForTable = Pick<User, "id" | "email" | "name">;

const columnHelper = createColumnHelper<UserForTable>();

const columns = [
  columnHelper.accessor("id", {
    header: "ID",
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor("email", {
    header: "Email",
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor("name", {
    header: "Nom",
    cell: (info) => info.getValue(),
  }),
];

const fallbackData: UserForTable[] = [];

export default function AdminHome() {
  const { data } = api.user.getAll.useQuery();

  const { cx, classes } = useStyles();

  const table = useReactTable({
    data: data ?? fallbackData,
    columns: columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <>
      <Head>
        <title>DCF - Admin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={fr.cx("fr-mt-4w")}>
          <h1>Liste des utilisateurs</h1>
        </div>
        <div
          className={cx(
            fr.cx("fr-table", "fr-table--bordered"),
            classes.tableWrapper
          )}
        >
          <table className={classes.table}>
            <thead>
              {table.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th key={header.id} scope="col">
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody>
              {table.getRowModel().rows.map((row) => (
                <tr key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <td key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </main>
    </>
  );
}

const useStyles = tss.withName(AdminHome.name).create(() => ({
  tableWrapper: {
    overflowX: "auto",
    boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
  },
  table: {
    display: "inline-table!important",
  },
}));
