import Head from "next/head";
import { fr } from "@codegouvfr/react-dsfr";
import { tss } from "tss-react";
import { api } from "~/utils/api";
import { createColumnHelper, type Row } from "@tanstack/react-table";
import type { ReferenceData } from "@prisma/client";
import DsfrTable from "~/components/DsfrTable";

type ReferenceDataForTable = ReferenceData & { requestCount: number };

const columnHelper = createColumnHelper<ReferenceDataForTable>();

const columns = [
  columnHelper.display({
    id: "expander",
    cell: ({ row }) => {
      return row.getCanExpand() ? (
        <button
          onClick={row.getToggleExpandedHandler()}
          style={{
            background: "none",
            border: "none",
            cursor: "pointer",
          }}
        >
          {row.getIsExpanded() ? (
            <i className="ri-arrow-down-s-fill" />
          ) : (
            <i className="ri-arrow-right-s-fill" />
          )}
        </button>
      ) : (
        "üîµ"
      );
    },
  }),
  columnHelper.accessor("id", {
    header: "ID",
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor("owner", {
    header: "Propri√©taire",
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor("createdAt", {
    header: "Date de cr√©ation",
    cell: (info) => info.getValue().toLocaleDateString(),
  }),
  columnHelper.accessor("updatedAt", {
    header: "Date de mise √† jour",
    cell: (info) => info.getValue().toLocaleDateString(),
  }),
  columnHelper.accessor("requestCount", {
    header: "Nombre de demandes",
    cell: (info) => info.getValue(),
  }),
];

const fallbackData: ReferenceDataForTable[] = [];

const renderSubComponent = ({ row }: { row: Row<ReferenceDataForTable> }) => {
  const blockStyle = {
    backgroundColor: "white",
    padding: `${fr.spacing("5v")} ${fr.spacing("4v")}`,
    borderRadius: fr.spacing("3v"),
    border: `1px solid ${fr.colors.decisions.background.contrast.grey.hover}`,
  };

  return (
    <div
      className={fr.cx("fr-grid-row", "fr-grid-row--gutters")}
      style={{
        backgroundColor: fr.colors.decisions.background.raised.grey.hover,
        margin: `-${fr.spacing("4v")}`,
        padding: fr.spacing("5v"),
        columnGap: fr.spacing("4v"),
        rowGap: fr.spacing("4v"),
      }}
    >
      <div className={fr.cx("fr-col-6")} style={blockStyle}>
        <span>Description</span>
        <p>{row.original.description}</p>
      </div>
      <div className={fr.cx("fr-col-3")} style={blockStyle}>
        <span>Emplacement de stockage</span>
        <p>{row.original.storageLocation}</p>
      </div>
      <div className={fr.cx("fr-col-3")} style={blockStyle}>
        <span>Traitement effectu√©</span>
        <p>{row.original.processingDone}</p>
      </div>
      <div className={fr.cx("fr-col-3")} style={blockStyle}>
        <span>Personnes ayant acc√®s</span>
        <p>{row.original.peopleAccess}</p>
      </div>
    </div>
  );
};

export default function AdminHome() {
  const { data } = api.reference.getAll.useQuery();

  const { cx, classes } = useStyles();

  return (
    <>
      <Head>
        <title>DCF - Admin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={fr.cx("fr-mt-4w")}>
          <h1>Liste des r√©f√©rences</h1>
        </div>
        <DsfrTable<ReferenceDataForTable>
          data={data ?? fallbackData}
          columns={columns}
          renderSubComponent={renderSubComponent}
        />
      </main>
    </>
  );
}

const useStyles = tss.withName(AdminHome.name).create(() => ({
  tableWrapper: {
    overflowX: "auto",
    boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
  },
  table: {
    display: "inline-table!important",
  },
}));
