generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_ADDON_URI")
}

enum RequestStatus {
  pending
  approved
  rejected
}

model Request {
  id            Int             @id @default(autoincrement())
  status        RequestStatus   @default(pending)
  formData      Json
  yamlFile      String
  referenceData ReferenceData[] @relation("RequestReferenceData")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([status])
}

model ReferenceData {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  owner           String
  processingDone  String
  peopleAccess    String
  storageLocation String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  personalData    PersonalData?
  request         Request[]     @relation("RequestReferenceData")
}

enum LegalWorkProcessing {
  general_legal_framework  @map("Cadre légal général")
  specific_legal_framework @map("Cadre légal spécifique")
  deliberation             @map("Délibération")
  none                     @map("Aucun - demande décret DNUM")
  sufficient_decree        @map("Décret suffisant")
  insufficient_decree      @map("Décret insuffisant - révision nécessaire")
}

model PersonalData {
  id                      Int                 @id @default(autoincrement())
  recipient               String
  retentionPeriodInMonths Int
  processingType          String
  dataController          String
  authRequired            Boolean             @default(true)
  securityMeasures        String
  legalWorkProcessing     LegalWorkProcessing
  referenceData           ReferenceData       @relation(fields: [referenceDataId], references: [id], onDelete: Cascade)
  referenceDataId         Int                 @unique
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  @@index([referenceDataId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  role          UserRole  @default(USER)
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model Session {
  id        Int      @id @default(autoincrement())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}



model Account {
  id                    Int       @id @default(autoincrement())
  accountId             Int
  providerId            String
  userId                Int
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
